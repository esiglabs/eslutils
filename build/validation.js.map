{"version":3,"sources":["../src/validation.js"],"names":["verifyChain","pkijs","certificate","chain","trustedCAs","Promise","resolve","then","certificateChainEngine","CertificateChainValidationEngine","certs","trustedCerts","filter","cert","push","verify","result"],"mappings":";;;;;QAkBgBA,W,GAAAA,W;;AAZhB;;IAAYC,K;;;;AAEZ;;;;;;;;;;AAUO,SAASD,WAAT,CAAqBE,WAArB,EAAkCC,KAAlC,EAAyCC,UAAzC,EAAqD;AAC1D,MAAGF,gBAAgB,IAAnB,EACE,OAAOG,QAAQC,OAAR,CAAgB,KAAhB,CAAP;;AAEF,SAAOD,QAAQC,OAAR,GAAkBC,IAAlB,CAAuB,YAAM;AAClC,QAAMC,yBAAyB,IAAIP,MAAMQ,gCAAV,CAA2C;AACxEC,aAAOP,KADiE;AAExEQ,oBAAcP,WAAWQ,MAAX,CAAkB;AAAA,eAAQ,OAAOC,IAAP,KAAgB,WAAxB;AAAA,OAAlB;AAF0D,KAA3C,CAA/B;AAIAL,2BAAuBE,KAAvB,CAA6BI,IAA7B,CAAkCZ,WAAlC;;AAEA,WAAOM,uBAAuBO,MAAvB,EAAP;AACD,GARM,EAQJR,IARI,CAQC,kBAAU;AAChB,WAAOS,OAAOA,MAAd;AACD,GAVM,EAUJ,kBAAU;AACX,WAAO,KAAP;AACD,GAZM,CAAP;AAaD,C,CAnCD","file":"validation.js","sourcesContent":["/**\n * ESigLabs Common Utilities\n * Certificate validation.\n *\n * By Fotis Loukos <me@fotisl.com>\n */\nimport * as pkijs from 'pkijs';\n\n/**\n * Verify if a certificate chains to some trusted CAs.\n * @param {pkijs.Certificate} certificate - The certificate that will be\n * checked.\n * @param {Array<pkijs.Certificate>} chain - Additional certificates in the\n * chain.\n * @param {Array<pkijs.Certificate>} trustedCAs - The trusted CAs\n * @return {Promise<boolean>} A promise that is resolved with a boolean value\n * stating if the certificate was verified or not.\n */\nexport function verifyChain(certificate, chain, trustedCAs) {\n  if(certificate === null)\n    return Promise.resolve(false);\n\n  return Promise.resolve().then(() => {\n    const certificateChainEngine = new pkijs.CertificateChainValidationEngine({\n      certs: chain,\n      trustedCerts: trustedCAs.filter(cert => typeof cert !== 'undefined')\n    });\n    certificateChainEngine.certs.push(certificate);\n\n    return certificateChainEngine.verify();\n  }).then(result => {\n    return result.result;\n  }, result => {\n    return false;\n  });\n}\n"]}