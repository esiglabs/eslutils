{"version":3,"sources":["../src/signatureinfo.js"],"names":["SignatureInfo","id","sigVerified","hashVerified","hashAlgorithm","signerVerified","hasTS","tsVerified","tsCertVerified","cert","certBundle","tsCert","tsCertBundle","signingTruststore","timestampingTruststore","isValid","isSigned","verified","forEach","signer","name","status"],"mappings":";;;;;;;;;;AAAA;;;;;;;AAOA;;;IAGaA,a,WAAAA,a;AACX;;;;;AAKA,yBAAYC,EAAZ,EAAgB;AAAA;;AACd;;;;AAIA,SAAKA,EAAL,GAAUA,EAAV;AACA;;;;AAIA,SAAKC,WAAL,GAAmB,KAAnB;AACA;;;;AAIA,SAAKC,YAAL,GAAoB,KAApB;AACA;;;;AAIA,SAAKC,aAAL,GAAqB,EAArB;AACA;;;;AAIA,SAAKC,cAAL,GAAsB,EAAtB;AACA;;;;AAIA,SAAKC,KAAL,GAAa,KAAb;AACA;;;;AAIA,SAAKC,UAAL,GAAkB,KAAlB;AACA;;;;;AAKA,SAAKC,cAAL,GAAsB,EAAtB;AACA;;;;AAIA,SAAKC,IAAL,GAAY,IAAZ;AACA;;;;AAIA,SAAKC,UAAL,GAAkB,EAAlB;AACA;;;;AAIA,SAAKC,MAAL,GAAc,IAAd;AACA;;;;AAIA,SAAKC,YAAL,GAAoB,EAApB;AACD;;AAED;;;;;;;;;;AAiBA;;;;;;;;;;sCAUkBC,iB,EAAmBC,sB,EAAwB;AAC3D,UAAG,CAAC,KAAKC,OAAN,IAAiB,CAAC,KAAKC,QAA1B,EACE,OAAO,KAAP;;AAEF,UAAIC,WAAW,KAAf;AACA,WAAKZ,cAAL,CAAoBa,OAApB,CAA4B,kBAAU;AACpC,YAAGC,OAAOC,IAAP,KAAgBP,iBAAnB,EACEI,WAAWE,OAAOE,MAAlB;AACH,OAHD;AAIA,UAAGJ,aAAa,KAAhB,EACE,OAAO,KAAP;;AAEF,UAAG,KAAKX,KAAR,EAAe;AACbW,mBAAW,KAAX;AACA,aAAKT,cAAL,CAAoBU,OAApB,CAA4B,kBAAU;AACpC,cAAGC,OAAOC,IAAP,KAAgBN,sBAAnB,EACEG,WAAWE,OAAOE,MAAlB;AACH,SAHD;AAIA,YAAGJ,aAAa,KAAhB,EACE,OAAO,KAAP;AACH;;AAED,aAAO,IAAP;AACD;;;wBA9CmB;AAClB,aAAO,KAAKF,OAAL,GAAe,KAAKC,QAApB,GAA+B,KAAKd,WAApC,GAAkD,KAAKC,YAA9D;AACD;;AAED;;;;;;;wBAI+B;AAC7B,aAAO,KAAKY,OAAL,GAAe,KAAKC,QAApB,GAA+B,KAAKd,WAApC,GACL,KAAKC,YADA,GACe,KAAKG,KADpB,GAC4B,KAAKC,UADxC;AAED;;;;;;AAoCF","file":"signatureinfo.js","sourcesContent":["/**\n * ESigLabs Common Utilities\n * Signature information.\n *\n * By Fotis Loukos <me@fotisl.com>\n */\n\n/**\n * Single signature validation information.\n */\nexport class SignatureInfo {\n  /**\n   * Generate an empty SignatureInfo object.\n   * @param {Object} id - The signature's identifier.\n   * @constructor\n   */\n  constructor(id) {\n    /**\n     * @type {Object}\n     * @description An identifier for the signature.\n     */\n    this.id = id;\n    /**\n     * @type {boolean}\n     * @description Signed hash has been verified.\n     */\n    this.sigVerified = false;\n    /**\n     * @type {boolean}\n     * @description The hash corresponds to the signed data.\n     */\n    this.hashVerified = false;\n    /**\n     * @type {string}\n     * @description The algorithm that was used to hash the data.\n     */\n    this.hashAlgorithm = '';\n    /**\n     * @type {Array<TrustStoreStatus>}\n     * @description Signer certificate chains to a trusted signing CA.\n     */\n    this.signerVerified = [];\n    /**\n     * @type {boolean}\n     * @description A timestamped file.\n     */\n    this.hasTS = false;\n    /**\n     * @type {boolean}\n     * @description The timestamp has been verified.\n     */\n    this.tsVerified = false;\n    /**\n     * @type {Array<TrustStoreStatus>}\n     * @description The certificate of the timestamp chains to a trusted\n     * timestamping CA.\n     */\n    this.tsCertVerified = [];\n    /**\n     * @type {pkijs.Certificate}\n     * @description The signer's certificate.\n     */\n    this.cert = null;\n    /**\n     * @type {Array<pkijs.Certificate>}\n     * @description A bundle of all certificates included in the signed object.\n     */\n    this.certBundle = [];\n    /**\n     * @type {pkijs.Certificate}\n     * @description The timestamp authority's certificate.\n     */\n    this.tsCert = null;\n    /**\n     * @type {Array<pkijs.Certificate>}\n     * @description A bundle of all certificates included in the timestamp.\n     */\n    this.tsCertBundle = [];\n  }\n\n  /**\n   * Check if the file verified was a valid signed file whose signature and\n   * signed hash have been verified.\n   */\n  get isValidSigned() {\n    return this.isValid & this.isSigned & this.sigVerified & this.hashVerified;\n  }\n\n  /**\n   * Check if the file verified was a valid signed and timestamped file whose\n   * signature, signed hash and timestamp have been verified.\n   */\n  get isValidSignedTimestamped() {\n    return this.isValid & this.isSigned & this.sigVerified &\n      this.hashVerified & this.hasTS & this.tsVerified;\n  }\n\n  /**\n   * Check if the signer has been verified against a truststore. If the file is\n   * timestamped, then the timestamp signer will also be checked against another\n   * truststore.\n   * @param {string} signingTruststore - The name of the signing truststore.\n   * @param {string} timestampingTruststore - The name of the timestamping\n   * truststore.\n   * @return {boolean} True if the file was verified against both truststores,\n   * false otherwise.\n   */\n  isSignersVerified(signingTruststore, timestampingTruststore) {\n    if(!this.isValid || !this.isSigned)\n      return false;\n\n    let verified = false;\n    this.signerVerified.forEach(signer => {\n      if(signer.name === signingTruststore)\n        verified = signer.status;\n    });\n    if(verified === false)\n      return false;\n\n    if(this.hasTS) {\n      verified = false;\n      this.tsCertVerified.forEach(signer => {\n        if(signer.name === timestampingTruststore)\n          verified = signer.status;\n      });\n      if(verified === false)\n        return false;\n    }\n\n    return true;\n  }\n};\n"]}