{"version":3,"sources":["../src/validationinfo.js"],"names":["ValidationInfo","isValid","isSigned","signatures","signingTruststore","timestampingTruststore","verified","forEach","sigInfo","isSignersVerified","sigVerified","hashVerified"],"mappings":";;;;;;;;;;AAAA;;;;;;;AAOA;;;IAGaA,c,WAAAA,c;AACX;;;;AAIA,4BAAc;AAAA;;AACZ;;;;AAIA,SAAKC,OAAL,GAAe,KAAf;AACA;;;;AAIA,SAAKC,QAAL,GAAgB,KAAhB;AACA;;;;AAIA,SAAKC,UAAL,GAAkB,EAAlB;AACD;;AAED;;;;;;;;;AA0BA;;;;;;;;sCAQkBC,iB,EAAmBC,sB,EAAwB;AAC3D,UAAIC,WAAW,IAAf;;AAEA,WAAKH,UAAL,CAAgBI,OAAhB,CAAwB,mBAAW;AACjCD,oBAAYE,QAAQC,iBAAR,CAA0BL,iBAA1B,EACVC,sBADU,CAAZ;AAED,OAHD;;AAKA,aAAOC,QAAP;AACD;;;wBAxCiB;AAChB,UAAIA,WAAW,IAAf;;AAEA,WAAKH,UAAL,CAAgBI,OAAhB,CAAwB,mBAAW;AACjCD,oBAAYE,QAAQE,WAApB;AACD,OAFD;;AAIA,aAAOJ,QAAP;AACD;;AAED;;;;;;wBAGmB;AACjB,UAAIA,WAAW,IAAf;;AAEA,WAAKH,UAAL,CAAgBI,OAAhB,CAAwB,mBAAW;AACjCD,oBAAYE,QAAQG,YAApB;AACD,OAFD;;AAIA,aAAOL,QAAP;AACD","file":"validationinfo.js","sourcesContent":["/**\n * ESigLabs Common Utilities\n * Validation information.\n *\n * By Fotis Loukos <me@fotisl.com>\n */\n\n/**\n * Object validation information.\n */\nexport class ValidationInfo {\n  /**\n   * Generate an empty ValidationInfo object.\n   * @constructor\n   */\n  constructor() {\n    /**\n     * @type {boolean}\n     * @description A valid file.\n     */\n    this.isValid = false;\n    /**\n     * @type {boolean}\n     * @description A signed file.\n     */\n    this.isSigned = false;\n    /**\n     * @type {Array<SignatureInfo>}\n     * @description Validation information for all signatures.\n     */\n    this.signatures = [];\n  }\n\n  /**\n   * Check if all signatures have been verified.\n   */\n  get sigVerified() {\n    let verified = true;\n\n    this.signatures.forEach(sigInfo => {\n      verified &= sigInfo.sigVerified;\n    });\n\n    return verified;\n  }\n\n  /**\n   * Check if all hashes correspond to the signed data.\n   */\n  get hashVerified() {\n    let verified = true;\n\n    this.signatures.forEach(sigInfo => {\n      verified &= sigInfo.hashVerified;\n    });\n\n    return verified;\n  }\n\n  /**\n   * Check if all signers have been verified against a truststore.\n   * @param {string} signingTruststore - The name of the signing truststore.\n   * @param {string} timestampingTruststore - The name of the timestamping\n   * truststore.\n   * @return {boolean} True if the file was verified against both truststores,\n   * false otherwise.\n   */\n  isSignersVerified(signingTruststore, timestampingTruststore) {\n    let verified = true;\n\n    this.signatures.forEach(sigInfo => {\n      verified &= sigInfo.isSignersVerified(signingTruststore,\n        timestampingTruststore);\n    });\n\n    return verified;\n  }\n}\n"]}