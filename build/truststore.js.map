{"version":3,"sources":["../src/truststore.js"],"names":["TrustStoreList","tsList","truststore","push","name","i","length","splice","cb","Symbol","iterator","tsCopy","slice","next","value","done"],"mappings":";;;;;;;;;;AAAA;;;;;;;AAOA;;;;;;;;AAQA;;;;;;;;AAQA;;;IAGaA,c,WAAAA,c;AACX;;;;AAIA,4BAAc;AAAA;;AACZ;;;;AAIA,SAAKC,MAAL,GAAc,EAAd;AACD;;AAED;;;;;;;;kCAIcC,U,EAAY;AACxB,WAAKD,MAAL,CAAYE,IAAZ,CAAiBD,UAAjB;AACD;;AAED;;;;;;;qCAIiBE,I,EAAM;AACrB,WAAI,IAAIC,IAAI,CAAZ,EAAeA,IAAI,KAAKJ,MAAL,CAAYK,MAA/B,EAAuCD,GAAvC,EAA4C;AAC1C,YAAG,KAAKJ,MAAL,CAAYI,CAAZ,EAAeD,IAAf,KAAwBA,IAA3B,EAAiC;AAC/B,eAAKH,MAAL,CAAYM,MAAZ,CAAmBF,CAAnB,EAAsB,CAAtB;AACAA;AACD;AACF;AACF;;AAED;;;;;;;;4BAKQG,E,EAAI;AACV,WAAI,IAAIH,IAAI,CAAZ,EAAeA,IAAI,KAAKJ,MAAL,CAAYK,MAA/B,EAAuCD,GAAvC;AACEG,WAAG,KAAKP,MAAL,CAAYI,CAAZ,CAAH,EAAmBA,CAAnB,EAAsB,KAAKJ,MAA3B;AADF;AAED;;AAED;;;;;SAGCQ,OAAOC,Q;4BAAY;AAClB,UAAIL,IAAI,CAAR;AACA,UAAIM,SAAS,KAAKV,MAAL,CAAYW,KAAZ,EAAb;;AAEA,aAAO;AACLC,cAAM,gBAAW;AACf,iBAAO;AACLC,mBAAOH,OAAON,GAAP,CADF;AAELU,kBAAMV,IAAIM,OAAOL;AAFZ,WAAP;AAID;AANI,OAAP;AAQD","file":"truststore.js","sourcesContent":["/**\n * ESigLabs Common Utilities\n * Trust store helpers.\n *\n * By Fotis Loukos <me@fotisl.com>\n */\n\n/**\n  * A trust store.\n  * @typedef {Object} TrustStore\n  * @property {string} name - The name of the trust store.\n  * @property {Array<pkijs.Certificate>} certificates - All the certificates\n  * contained in the trust store.\n  */\n\n/**\n * Trust store verification status.\n * @typedef {Object} TrustStoreStatus\n * @property {string} name - The name of the trust store.\n * @property {boolean} status - True if the certificate chains to this trust\n * store, false otherwise.\n */\n\n/**\n * A trust store list.\n */\nexport class TrustStoreList {\n  /**\n   * Generate an empty TrustStoreList object.\n   * @constructor\n   */\n  constructor() {\n    /**\n     * @type {Array<TrustStore>}\n     * @description An array holding all trust stores.\n     */\n    this.tsList = [];\n  }\n\n  /**\n   * Add a new trust store to the list.\n   * @param {TrustStore} truststore - The new trust store.\n   */\n  addTrustStore(truststore) {\n    this.tsList.push(truststore);\n  }\n\n  /**\n   * Remove a trust store from the list.\n   * @param {string} name - The name of the trust store.\n   */\n  removeTrustStore(name) {\n    for(let i = 0; i < this.tsList.length; i++) {\n      if(this.tsList[i].name === name) {\n        this.tsList.splice(i, 1);\n        i--;\n      }\n    }\n  }\n\n  /**\n   * Call a callback function for every truststore. Arguments are the same\n   * as with Array.prototype.forEach.\n   * @param {function} cb - The callback.\n   */\n  forEach(cb) {\n    for(let i = 0; i < this.tsList.length; i++)\n      cb(this.tsList[i], i, this.tsList);\n  }\n\n  /**\n   * Implement Iterable protocol\n   */\n  [Symbol.iterator]() {\n    let i = 0;\n    let tsCopy = this.tsList.slice();\n\n    return {\n      next: function() {\n        return {\n          value: tsCopy[i++],\n          done: i > tsCopy.length\n        };\n      }\n    };\n  }\n}\n"]}